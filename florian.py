import argparse
import os
from datetime import datetime, timedelta

from z3 import Solver

_PUZZLES_FOLDER = 'puzzles/'
_FLORIAN_FOLDER = 'florian/'


class Florian:
    """A class used to represent Florian's solver.

    This class can transform the puzzles from our format to Florian's format and solve them using Florian's
     rubiks_sat.py.
    """

    # The name of the puzzle file to be used.
    __puzzle_file: str

    # The name of the puzzle file as text file to be used.
    __puzzle_file_txt: str

    # The number of moves to be made in the solution.
    __number_of_moves: int

    def __init__(self, puzzle_file: str, number_of_moves: int):
        """Create a new Florian object.
        @param puzzle_file: The name of the puzzle file to be used.
        @param number_of_moves: The number of moves to be made in the solution.
        """
        self.__puzzle_file = puzzle_file
        self.__puzzle_file_txt = self.__puzzle_file + '.txt'
        self.__number_of_moves = number_of_moves

    def solve(self) -> tuple[float, float, str]:
        """Solves the puzzle using Florian's rubiks_sat.py.

        Also, this function measures the preparation time and the solving time.

        @return: A tuple containing the preparation time, the solving time and the result of the solution.
        """
        prep_time = 0
        solve_time = 0

        # Convert the puzzle to Florian's format and measure prep time.
        prep_time = self.to_florians_dimacs().total_seconds()

        # Solve the puzzle using the dimacs file generated by Florian's rubiks_sat and measure solve time.
        solve_start = datetime.now()
        solve_result = self.solve_florians_dimacs()
        solve_end = datetime.now() - solve_start
        solve_time += solve_end.total_seconds()

        return prep_time, solve_time, solve_result

    @staticmethod
    def puzzle_us_to_florian(puzzle: str) -> str:
        """Converts a puzzle from our format to Florian's format.

        @param puzzle: The puzzle in our format.
        @return: The puzzle in Florian's format.
        """
        face_1 = puzzle[0:4]
        face_2 = puzzle[4:8]
        face_3 = puzzle[8:12]
        face_4 = puzzle[12:16]
        face_5 = puzzle[16:20]
        face_6 = puzzle[20:24]

        face_1 = face_1[1] + face_1[3] + face_1[0] + face_1[2]
        face_2 = face_2[1] + face_2[3] + face_2[0] + face_2[2]
        face_3 = face_3[2] + face_3[0] + face_3[3] + face_3[1]
        face_4 = face_4[1] + face_4[3] + face_4[0] + face_4[2]
        face_5 = face_5[1] + face_5[3] + face_5[0] + face_5[2]
        face_6 = face_6[1] + face_6[3] + face_6[0] + face_6[2]

        return face_2 + face_1 + face_5 + face_3 + face_6 + face_4

    def puzzle_file_to_florian(self) -> None:
        """Converts a puzzle file to Florian's format."""
        puzzle = open(f'{_PUZZLES_FOLDER}{self.__puzzle_file_txt}').readline()
        (open(f'{_FLORIAN_FOLDER}{_PUZZLES_FOLDER}{self.__puzzle_file_txt}', 'w')
         .write(self.puzzle_us_to_florian(puzzle)))

    def to_florians_dimacs(self) -> timedelta:
        """Converts a puzzle file to Florian's format and runs rubiks_sat.py with the given number of moves.

        This function takes one of our puzzles files and transforms it into a file readable by Florian's rubiks_sat.py.
         Which in turn transforms it into a dimacs file.

        @return: The time it took to prepare the puzzle.
        """
        self.puzzle_file_to_florian()

        prep_start = datetime.now()
        os.system(
            f"""
python {_FLORIAN_FOLDER}/rubiks_sat.py {_FLORIAN_FOLDER}{_PUZZLES_FOLDER}{self.__puzzle_file_txt} \
{self.__number_of_moves} {self.__puzzle_file}
            """
        )
        prep_end = datetime.now() - prep_start

        return prep_end

    def solve_florians_dimacs(self) -> str:
        """Solves the rubiks cube problem using the dimacs file generated by Florian's rubiks_sat.py."""
        s = Solver()
        s.from_file(f'{_FLORIAN_FOLDER}dimacs/{self.__puzzle_file}_{self.__number_of_moves}.dimacs')

        return s.check()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("path", type=str)
    parser.add_argument("nr_of_moves", type=int)
    args = parser.parse_args()

    florian_instance = Florian(args.path, args.nr_of_moves)
    time_prep, time_solve, result = florian_instance.solve()
    print(f"Preparation time: {time_prep}")
    print(f"Solving time: {time_solve}")
    print(f"Result: {result}")
